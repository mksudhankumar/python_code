import os
import sys
import argparse
import string
import random
from cryptography.fernet import Fernet


class passENCRYPTION_DECRYPTION:
    # Variable declaration part
    user_present = False
    passdir_path = "tmp"
    passfile_path = os.path.join(passdir_path+"/mypassword.txt")
    refkey = os.path.join(passdir_path+"/refkey")
    myencryptedpasswd = os.path.join(passdir_path+"/encryptedPWD")


    def __init__(self):
        print("Password encryption/decryption tool")

    def pass_ENCRYPTION(self, passfile, refkey, encryptedpasswd):
        # Reading password stored in a file, which needs to be encrypted
        with open(passfile) as f:
            mypwd = ''.join(f.readlines())

        # Generate encryption key and store it to a file
        key = Fernet.generate_key()
        f = open(refkey, "wb")
        f.write(key)
        f.close()

        # Encrypt password and store it on a file
        refkey = Fernet(key)
        mypwdbyt = bytes(mypwd, 'utf-8')
        encryptedPWD = refkey.encrypt(mypwdbyt)
        f = open(encryptedpasswd, "wb")
        f.write(encryptedPWD)
        f.close()
        print("Password encryption completed")

        # Delete the password file which was created initially
        if os.path.exists(passfile):
            os.remove(passfile)
        else:
            print("File missing or deleted")

    def pass_DECRYPTIOn(self, encryptedpasswdfile, refkeyfile):
        # Decryption part - 1
        with open(encryptedpasswdfile) as f:
            encpwd = ''.join(f.readlines())
            encpwdbyt = bytes(encpwd, 'utf-8')
        f.close()

        # Decryption part byte conversion - 2
        with open(refkeyfile) as f:
            refkey = ''.join(f.readlines())
            refkeybyt = bytes(refkey, 'utf-8')
        f.close()

        # use key from 1 and passwd byte from 2 to get the password
        keytouse = Fernet(refkeybyt)
        myPass_before = (keytouse.decrypt(encpwdbyt))
        myPass = str(myPass_before.rstrip(), 'utf-8')
        return myPass

    # root login check
    def pass_rootID(self):
        if not os.getuid() == 0:
            sys.exit("This tool to be executed as root user ! Exiting")

    # function to clear the screen - Optional
    def pass_CLEAR(self):
        os.system("clear")

    # Random password generator
    def pass_RANDOM(self):
        print("Random password generator")
        length = int(input("\n Enter Length of the password to be generated: MIN 12 & MAX 18 :"))
        if not length < 12 and not length > 18:
            myLOWER = string.ascii_lowercase
            myUPPER = string.ascii_uppercase
            myNUMBER = string.digits
            mySYMBOL = string.punctuation
            passVALUE = myNUMBER+mySYMBOL+myUPPER+myLOWER
            TEMP = random.sample(passVALUE, length)
            myPASS = ''.join(TEMP)
            print(myPASS)
        else:
            sys.exit("Length of the password must be between 12 and 18")

    def argINPUT(self):
        parser = argparse.ArgumentParser()
        parser.add_argument('-e', '--encrypt', action='store_true', dest='encrypt', help='[Encrypt password]')
        parser.add_argument('-d', '--decrypt', action='store_true', dest='decrypt', help='[Decrypt password]')
        parser.add_argument('-r', '--random', action='store_true', dest='random', help='[Random password]')

        result = parser.parse_args()
        if result.encrypt:
            self.pass_CLEAR()
            print("Encryption option invoked")
            self.pass_rootID()
            if os.path.exists(self.passfile_path) and os.path.getsize(self.passfile_path) != 0:
                self.pass_ENCRYPTION(self.passfile_path, self.refkey, self.myencryptedpasswd)
            else:
                sys.exit("Either password file is empty or missing")
        elif result.decrypt:
            self.pass_CLEAR()
            print("Decryption option invoked")
            #self.pass_rootID()
            if os.path.exists(self.myencryptedpasswd) and os.path.getsize(self.myencryptedpasswd) != 0 and os.path.exists(self.refkey) and os.path.getsize(self.refkey) !=0 :
                myDECRYPTEDpass = (self.pass_DECRYPTIOn(self.myencryptedpasswd, self. refkey).split('/n'))
                myDECRYPTEDpass = list(filter(None, myDECRYPTEDpass))
                print("Your password - %s " %myDECRYPTEDpass)
            else:
                sys.exit("Decyption issue")

        elif result.random:
            self.pass_CLEAR()
            #self.pass_rootID() # optional
            self.pass_RANDOM()

        else:
            sys.exit("Wrong option used, use -h or --help for more details")

pass_obj = passENCRYPTION_DECRYPTION()
pass_obj.argINPUT()